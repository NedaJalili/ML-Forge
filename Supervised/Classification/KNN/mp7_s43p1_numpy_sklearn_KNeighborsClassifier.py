#داده های زیر مربوط به اطلاعات مشتریان یک بانک است که تا به حال وام گرفته اند. ستون اول:وضعیت داشتن منزل شخصی(دارد:۱/ندارد:۰)
#ستون دوم:تعداد سال هایی  که مشتری بانک بوده
#ستون سوم:آیا اقساط وام را به خوبی پرداخت کرده است؟(بله:۱/خیر:۰) داده های این ستون برچسب های داده ها هستند.
#تعداد همسایه بهینه را برای این مسیله پیدا کنید.

#فراخواني ماژول ها و توابع مورد نياز
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

# داده‌ها
data = np.array([
    [1, 3, 1], [0, 1, 0], [1, 1.5, 1], [1, 5, 1], [0, 2, 0], [0, 3.5, 0],
    [0.5, 2.5, 1], [1, 4, 1], [0, 0.5, 0], [1, 2, 1], [0, 3, 0],
    [0.5, 1.8, 1], [1, 4.5, 1], [0, 1.2, 0], [1, 3.8, 1], [0, 2.2, 0],
    [1, 3.2, 1], [0, 1.3, 0], [1, 1.7, 1], [1, 5.2, 1], [0, 2.1, 0], [0, 3.6, 0],
    [0.5, 2.6, 1], [1, 4.1, 1], [0, 0.6, 0], [1, 2.1, 1], [0, 3.2, 0],
    [0.5, 1.9, 1], [1, 4.6, 1], [0, 1.4, 0], [1, 3.9, 1], [0, 2.3, 0],
    [1, 3.5, 1], [0, 1.5, 0], [1, 2, 1], [1, 4.8, 1], [0, 2.4, 0], [0, 3.8, 0],
    [0.5, 2.7, 1], [1, 4.3, 1], [0, 0.7, 0], [1, 2.3, 1], [0, 3.1, 0],
    [0.5, 1.6, 1], [1, 4.9, 1], [0, 1.1, 0], [1, 3.6, 1], [0, 2.5, 0]
])

#تقسيم داده ها به دو بخش ويژگي و برچسب
x = data[:, :-1]#ويژگي ها
y = data[:, -1]#برچسب

# تقسیم داده‌ها به آموزش و تست (برای جلوگیری از خطا، تست سایز کوچک استفاده می کنیم) 
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1) 

# کنترل مقدار k
max_k = len(x_train)
k_values = range(1, min(16, max_k + 1))  # مقدار k حداکثر برابر تعداد نمونه‌های آموزشی

# بررسی مقادیر مختلف برای k و پيدا کردن تعداد همسايه بهينه
error = []#ليست خطا

for k in k_values:
    model = KNeighborsClassifier(n_neighbors=k)#ساخت مدل
    model.fit(x_train, y_train)#آموزش مدل با داده هاي آموزش
    y_pred = model.predict(x_test)#پيش بيني براي داده هاي آزمون
    error.append(np.mean(y_pred != y_test))  # میانگین خطا ذخیره می‌شود
print(error)
# رسم نمودار خطا
plt.plot(k_values, error, marker='o', linestyle='-')
plt.xlabel("n_neighbors (K)")
plt.ylabel("Error Rate")
plt.title("K vs Error Rate in KNN")
plt.xticks(k_values)  # نمایش اعداد k روی محور x
plt.grid()
plt.show()
